<<<THE EVIDENCE THAT SOLUTION WORKS AS EXPECTED>>

prc@prc:~/IdeaProjects/company/company-chart$ helm install company-chart ./
NAME: company-chart
LAST DEPLOYED: Mon Jan 18 12:01:41 2021
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=company-chart,app.kubernetes.io/instance=company-chart" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace default $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace default port-forward $POD_NAME 8080:$CONTAINER_PORT
prc@prc:~/IdeaProjects/company/company-chart$ kubectl get all
NAME                                 READY   STATUS    RESTARTS   AGE
pod/application-554f6cddbd-wqdjr     1/1     Running   1          28s
pod/company-chart-557bccf67c-xsdqm   1/1     Running   0          28s
pod/redis-db666d4b7-n58zn            1/1     Running   0          28s

NAME                          TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
service/application-service   ClusterIP   10.108.90.55     <none>        3000/TCP   28s
service/kubernetes            ClusterIP   10.96.0.1        <none>        443/TCP    15h
service/company-chart         ClusterIP   10.102.219.99    <none>        80/TCP     28s
service/redis-service         ClusterIP   10.110.159.215   <none>        6379/TCP   28s

NAME                            READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/application     1/1     1            1           28s
deployment.apps/company-chart   1/1     1            1           28s
deployment.apps/redis           1/1     1            1           28s

NAME                                       DESIRED   CURRENT   READY   AGE
replicaset.apps/application-554f6cddbd     1         1         1       28s
replicaset.apps/company-chart-557bccf67c   1         1         1       28s
replicaset.apps/redis-db666d4b7            1         1         1       28s
prc@prc:~/IdeaProjects/company/company-chart$ kubectl get ingress
NAME              CLASS    HOSTS           ADDRESS        PORTS   AGE
example-ingress   <none>   oxylabai.info   192.168.49.2   80      58s
prc@prc:~/IdeaProjects/company/company-chart$ curl oxylabai.info
All good! Last request was logged at: null


<<EXPLANATION>>

Prerequisites needed for the solution to work:
1. Linux running machine (I did use the one with Ubuntu desktop)
2. Docker https://docs.docker.com/engine/install/ubuntu/
3. Kubernetes minikube and all of its components (kubectl, ingress enabled) https://minikube.sigs.k8s.io/docs/start/

The Process:
1. I checked the provided docker-compose.yml file, and found that setup has two images - redis and custom app, using redis

2. Firstly i thought to go a more simple way and use 'kompose' servise which kubernetes provides for transforming docker .yml files to kubernetes.yaml. After checking the output yamls i found them really    messy and decided to go the "clean" way and design all yamls from scratch (with the help of google of course:))

3. First things first - i need to make a docker image using the Dockerfile provided of the application. Docker image was created without any issue, but the problem was, that it needed to be run locally as i did not want to share it on docker hub nor other repository.
	Problem using minkube is that it can only look for local docker images INSIDE its own virtual environment. And id did not want to run the image i created in my laptop. Solution for this was to set the environment variables eval $(minikube docker-env) so the docker daemon is re-used by minikube and create the image one more time. This time it worked as a charm, and i got the image inside the minikube docker image vault. 
	Checked using minikube ssh -> docker images
I am really embarrassed to admin that it took for me from 3 to 4 hours to set environment variables, as i did not noticed that my minikube instance was crashed... :)	
Anyway i was extremely happy when i managed to run the local image on kubernetes and got rid of the error messages in the pod. 

4. No issues faced when running redis image, as it was located in dockerHub
5. So i checked the requirement you provided for the application to run on kubernetes and ended up with the following config yaml files:

app-deployment.yaml 
ingress.yaml 
persistent-volume-claim.yaml  
persistent-volume.yaml
redis-configmap.yaml
redis-deployment.yaml
redis-secret.yaml

Further i will run through the YAML files and expaint their configs. 

6. app-deployment.yaml - yaml runnign local application docker image and app service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: application 
  labels:
    app: application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: application
  template:
    metadata:
      labels:
        app: application
    spec:
      containers:
        - name: application
          image: application 			#image name which was build from the source provided
          imagePullPolicy: Never
          ports:
            - containerPort: 3000 		#applicaion will expose port 3000 as per requirement
          env:
            - name: REDIS_PASSWORD		#env variable used in redis-secret.yaml for password encryption
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: REDIS_PASSWORD
            - name: REDIS_HOST		#env variable used in redis-configmap.yaml for app to know redis host to connect to
              valueFrom:
                configMapKeyRef:
                  name: redis-configmap
                  key: REDIS_HOST

---
apiVersion: v1
kind: Service					#application deployment service responsible for managing incomming requests on the ports specified
metadata:
  name: application-service
spec:
  selector:
    app: application
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      

7. redis-deployment.yaml - yaml running redis image and redis service

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: redis-persistent-storage	#redis claiming persistent volume as required 
          persistentVolumeClaim:
            claimName: redis-pvc
      containers:
        - name: redis
          image: redis:5.0.5-alpine		#redis image same as on docker-compose
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-persistent-storage
              mountPath: /tmp/redis		#volume mounted inside redis pod
          env:
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: redis-configmap
                  key: REDIS_HOST
            - name: REDIS_PASSWORD		#redis password taken from redis-secret.yaml file
              valueFrom:
                secretKeyRef:
                  name: redis-secret		
                  key: REDIS_PASSWORD
          command:
           - redis-server			#command runs after redis pod is tarted so start the server
          args:
           - --requirepass			#argument to require password to connect to redis
           - $(REDIS_PASSWORD)		#variable which takes password from redis-secret.yaml file


---
apiVersion: v1
kind: Service					#redis service responsible for handling incomming requests on the port specified
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
      
      
8. redis-secret.yaml - file contains encrypted redis password

apiVersion: v1
kind: Secret
metadata:
    name: redis-secret
type: Opaque
data:
    REDIS_PASSWORD: dmVyeXNlY3VyZXBhc3N3b3Jk 	#redis password was provided in a plain text which is not secure. This is password encrypted using base64 encryption "echo -n 'verysecurepassword' | base64"
    
9. redis-configmap.yaml - redis server location config file

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configmap
data:
  REDIS_HOST: redis-service  			#can be used as a variable in different applications without hardcoding. Took me 2 to 3 hours googling this as a made a human error and wrote redis instead of 						         redis-service because of what application pod was failing to connect to redis.. :)
  
10. ingress.yaml - ingress service config

apiVersion: networking.k8s.io/v1
kind: Ingress					#ingress service handles incomming web requests on port 80 and forwards them to application-deployment pod 
metadata:
  name: example-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  rules:
    - host: oxylabai.info			#made up hostname. once ingress pod starts up it gets external IP address which can be assigned with the hostname in /etc/hosts file for testing purposes
      http:					    #in my case it was
        paths:					#NAME              CLASS    HOSTS           ADDRESS        PORTS   AGE
          - path: /				#example-ingress   <none>   oxylabai.info   192.168.49.2   80      127m
            pathType: Prefix
            backend:
              service:
                name: application-service	#application pod service name and port for ingress to know where to forward requests
                port:
                  number: 3000

11. persistent-volume.yaml - reserving space on local node for redis

apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  labels:
    type: local
spec:
  storageClassName: manual			#used to connect persisted volume when claiming
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/"
    
12. persistent-volume-claim.yaml - claiming for reserved space 

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  storageClassName: manual			#used to connect persisted volume when claiming
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
      

13. After all yaml configurations was running fine starting them one-by one, i installed helm and copied .yaml files into Templates folder accordingly which was created after initialising new chart creation from helm. 

Resources used to accomplish this homework:

https://www.youtube.com/watch?v=X48VuDVv0do				  - Kubernetes Tutorial for Beginners [FULL COURSE in 4 Hours]
https://docs.bitnami.com/tutorials/create-your-first-helm-chart/ 	  - helm tutorial
https://minikube.sigs.k8s.io/docs/handbook/persistent_volumes/	  - minikube doccs
https://dzone.com/articles/running-local-docker-images-in-kubernetes-1  - for running local docker images


  
  

